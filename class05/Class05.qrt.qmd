---
title: "Class 5: Data Viz with ggplot"
author: "Jeremy Pham A16830268"
format: pdf
toc: true
---

# Background

There are many graphics systems in available in R. These include "base" R and tons of add on packages like *ggplot2*

Let's compare "base" and *ggplot2* briefly: We can use some example data that is built-in with R called `cars`: 

```{r}
head(cars)
```

In base R I can just call `plot()`

```{r}
plot(cars)
```

How can we do this with **ggplot2**

First we need to install the package. We do this `install.packages("ggplot2")`. I only need to do this once and then it will be available on my computer from then on.

> Key point: I only install packages in the R console, not within quarto docs or R scripts.

Before I use any add-on package I must load it up with a call to `library()`

```{r}
library(ggplot2)
ggplot(cars)
```

Every ggplot has at least 3 things:

- the **data** (in our case `cars`)
- the **aes**thetics (how the data map to the plot)
- the **geom**s that determine how the plot is drawn (lines, points, columns, etc...)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist)
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

For "simple" plots ggplot is much more verbose than base R but the defaults are nicer and for complicated plots it becomes much more efficient and structured.

> Question: Add a line to show the relationship of speed to stopping distance (i.e. add another "layer")

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_line()
```


```{r}
p <- ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se=FALSE, method="lm")
```


I can always save any ggplot object (i.e. plot) and then use it later for adding more layers.

```{r}
p
```


> Question: Add a title and subtitle to the plot 

```{r}
p + labs(title="My first ggplot",
         subtitle="Stopping Distance of Old Cars",
         caption="BIMM143",
         x="Speed (MPG)",
         y="Stopping Distance (ft)") + 
  theme_bw()
```

# Gene expression plot

Read input data into R

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```


> Question: How many genes are in this dataset?

```{r}
nrow(genes)
```
> Question: How many columns are there?

```{r}
ncol(genes)
```
> Question: What are the column names?

```{r}
colnames(genes)
```
> Question: How many "up" and "down" regulated genes are there? 

```{r}
table(genes$State)
```


## Custom Color Plot

> Question: Make a first plot of this data

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  scale_color_manual(values=c("purple", "grey", "orange")) +
  geom_point() +
  labs(title="Gene Expression Changes Upon Drug Treatment",
       x="Control (no drug)",
       y= "Drug Treated") +
  theme_bw()
```


# Using different geoms

Let's plot some aspects of the in-built `mtcars` dataset.

```{r}
head(mtcars)
```

> Question: Scatter plot of `mpg` vs `disp`

```{r}
p1 <- ggplot(mtcars) +
  aes(mpg, disp) +
  geom_point() +
  labs(title="MPG vs Disp",
       x="MPG",
       y="Disp")
p1
```


> Question: Boxplot of `gear` vs `disp`

```{r}
p2 <- ggplot(mtcars) +
  aes(gear, disp, group=gear) +
  geom_boxplot()
p2
```

> Question: barplot of `carb` 

```{r}
p3 <- ggplot(mtcars) +
  aes(carb) +
  geom_bar()
p3
```


> Question: Smooth of `disp` vs `qsec` 

```{r}
p4 <- ggplot(mtcars) +
  aes(disp, qsec) +
  geom_smooth()
p4
```

I want to combine all these plots into one figure with multiple pannels

We can use the **patchwork** package to do this

```{r}
library(patchwork)

(p1 + p2 + p3 + p4)
```

```{r}
ggsave(filename="Myplot.png", width=10, height=10)
```

## Faceting

# File location online
```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

```{r}
head(gapminder)
```

> Question: How many countries are in this dataset?

```{r}
length(table(gapminder$country))
```

> Question: Plot gdpPercap vs lifeExp colored by continent

```{r}
ggplot(gapminder) +
  aes(x = gdpPercap, y = lifeExp, color = continent, size = pop) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent) +
  theme_bw()
```


