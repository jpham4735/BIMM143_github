<<<<<<< HEAD
---
title: "Class 8: Breast Cancer Mini Project"
author: "Jeremy Pham (A16830268)"
format: pdf
toc: true
---

## Background

This mini-project explores unsupervised learning techniques applied to the Wisconsin Breast Cancer Diagnostic Data Set, which contains measurements of human breast mass cell nuclei. The project guides the user through exploratory data analysis, performing and interpreting Principal Component Analysis (PCA) to reduce the dimensionality of the data while retaining variance, and applying hierarchical clustering with different linkage methods. It also includes an optional section on K-means clustering for comparison. The ultimate goal is to combine PCA and clustering to better separate benign and malignant cell samples, evaluating the results using metrics like sensitivity and specificity, and finally demonstrating how to predict the classification of new samples using the developed PCA model.

## Data Import

Our data come from the U. of Wisconsin Medical Center

```{r}
#read.csv("WisconsinCancer.csv")
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
```

>Question 1: How many patients/samples are in this dataset?

```{r}
nrow(wisc.df)
```

>Question 2: How many of the observations have a malignant diagnosis?

```{r}
wisc.df$diagnosis
```

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```
```{r}
colnames(wisc.df)
```

> Question 3: How many variables/features in the data are suffixed with _mean?

```{r}
(grep("mean", colnames(wisc.df), value = T))
```
There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)

head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering 

Let's try a `hclust()`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```
```{r}
table(diagnosis)
```
We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### The importance of data scalling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`. 

```{r}
#prcomp()
head(mtcars)
```

We coudl do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```


Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```
```{r}
apply(mtcars, 2, sd)
```
We can "scale" this data before PCA to get a much better representation and analysis of all the columns

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a. score plot, ordienation plot, or PC1 vs PC2 plot). The "loadings plot" how the original variables contribute to the new PCs

A loadings plot of the unscalled PCA results
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```


```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```
PC plot of scaled PCA results
```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) + 
  geom_point() +
  geom_text()
```

> Key point: In general we will set `scale=TRUE` wehn we do PCA. This is not the default but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=T)
```
To see how well PCA is doing here in terms capturing the variance (or spread) in the data we can use the `summary()` function.

```{r}
summary(wisc.pr)
```
> Question 4: From your results, what proportion of the original variance is captured by the first principal components (PC1)

44.27%

> Question 5: How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3

>Question 6:How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7

```{r}
biplot(wisc.pr)
```
> Question 7: What stands out to you about this plot? Is it easy or difficult to understand? Why?

What stands out is the main cluster of data in the middle of the plot, which makes it extremely difficult to understand due to the close proximity of the data points to one another.

```{r}
plot(wisc.pr$x, col = diagnosis, xlab = "PC1", ylab = "PC2")
```

> Question 8: Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

These plots very similar in their data points but the plot for PC1 and PC3 has better grouping compared to the first plot where there is less intermingling of benign and malignant data points.

```{r}
plot(wisc.pr$x[,-2], col=diagnosis, xlab = "PC1", ylab = "PC3")
```

Let's make the main PC1 vs PC2 

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```

```{r}
pr.var <- wisc.pr$sdev^2
head(pr.var)
```
```{r}
pve <- pr.var/30
plot(pve, xlab="Principal Component",
     ylab = "Proportion of Variance Explained",
     ylim = c(0,1), type="o")
```

```{r}
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

> Question 9: For the first principal component, what is the component of the loading vector for the feature `concave.points_mean`?

```{r}
wisc.pr$rotation[,1]
```
-0.26

> Question 10: Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?


```{r}
data.scaled <- scale(wisc.data)
```
```{r}
data.dist <- dist(data.scaled)
```
```{r}
wisc.hclust <- hclust(data.dist, method = "complete")
```
```{r}
plot(wisc.hclust)
abline(h = 19, col="red", lty=2)
```

At height 19 the clustering model has 4 clusters.

> Question 12: Which method gives your favorite results for the same data.dist dataset? 

The method = "complete" gives our favorite results because it is sensitive to noise in the data set and can help create compact clusters.

## 5. Combining methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[,1:2]), method = "ward.D2" )
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups): 
```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```
How do my cluster groups compare to the expert diagnosis 

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Question 13: How well does the newly created model with four clusters seperate out the two diagnoses?

The newly created model with four clusters separates out the two diagnoses very clearly and makes a more easy to read dendrogram with the same amount of information.


> Qustion 14: How well do the hierarchical clustering models you created in previous sections do in terms of separitng the diagnoses? Again, use the table() function to compare the output of each model with the vector containing the actual diagrams

They did really baddly. We do much better after PCA - the new PCA variables (what we call a basis set) give us much better seperation of M and B

## 7. Prediction

we can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich.


```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> QUESTION 16: Which of these new patients should we prioritize for follow up based on your results?

PATIENT 2



=======
---
title: "Class 8: Breast Cancer Mini Project"
author: "Jeremy Pham (A16830268)"
format: pdf
toc: true
---

## Background

This mini-project explores unsupervised learning techniques applied to the Wisconsin Breast Cancer Diagnostic Data Set, which contains measurements of human breast mass cell nuclei. The project guides the user through exploratory data analysis, performing and interpreting Principal Component Analysis (PCA) to reduce the dimensionality of the data while retaining variance, and applying hierarchical clustering with different linkage methods. It also includes an optional section on K-means clustering for comparison. The ultimate goal is to combine PCA and clustering to better separate benign and malignant cell samples, evaluating the results using metrics like sensitivity and specificity, and finally demonstrating how to predict the classification of new samples using the developed PCA model.

## Data Import

Our data come from the U. of Wisconsin Medical Center

```{r}
#read.csv("WisconsinCancer.csv")
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
```

>Question 1: How many patients/samples are in this dataset?

```{r}
nrow(wisc.df)
```

>Question 2: How many of the observations have a malignant diagnosis?

```{r}
wisc.df$diagnosis
```

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```
```{r}
colnames(wisc.df)
```

> Question 3: How many variables/features in the data are suffixed with _mean?

```{r}
(grep("mean", colnames(wisc.df), value = T))
```
There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)

head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering 

Let's try a `hclust()`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```
```{r}
table(diagnosis)
```
We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### The importance of data scalling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`. 

```{r}
#prcomp()
head(mtcars)
```

We coudl do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```


Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```
```{r}
apply(mtcars, 2, sd)
```
We can "scale" this data before PCA to get a much better representation and analysis of all the columns

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a. score plot, ordienation plot, or PC1 vs PC2 plot). The "loadings plot" how the original variables contribute to the new PCs

A loadings plot of the unscalled PCA results
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```


```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```
PC plot of scaled PCA results
```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) + 
  geom_point() +
  geom_text()
```

> Key point: In general we will set `scale=TRUE` wehn we do PCA. This is not the default but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=T)
```
To see how well PCA is doing here in terms capturing the variance (or spread) in the data we can use the `summary()` function.

```{r}
summary(wisc.pr)
```
> Question 4: From your results, what proportion of the original variance is captured by the first principal components (PC1)

44.27%

> Question 5: How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3

>Question 6:How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7

```{r}
biplot(wisc.pr)
```
> Question 7: What stands out to you about this plot? Is it easy or difficult to understand? Why?

What stands out is the main cluster of data in the middle of the plot, which makes it extremely difficult to understand due to the close proximity of the data points to one another.

```{r}
plot(wisc.pr$x, col = diagnosis, xlab = "PC1", ylab = "PC2")
```

> Question 8: Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

These plots very similar in their data points but the plot for PC1 and PC3 has better grouping compared to the first plot where there is less intermingling of benign and malignant data points.

```{r}
plot(wisc.pr$x[,-2], col=diagnosis, xlab = "PC1", ylab = "PC3")
```

Let's make the main PC1 vs PC2 

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```

```{r}
pr.var <- wisc.pr$sdev^2
head(pr.var)
```
```{r}
pve <- pr.var/30
plot(pve, xlab="Principal Component",
     ylab = "Proportion of Variance Explained",
     ylim = c(0,1), type="o")
```

```{r}
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

> Question 9: For the first principal component, what is the component of the loading vector for the feature `concave.points_mean`?

```{r}
wisc.pr$rotation[,1]
```
-0.26

> Question 10: Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?


```{r}
data.scaled <- scale(wisc.data)
```
```{r}
data.dist <- dist(data.scaled)
```
```{r}
wisc.hclust <- hclust(data.dist, method = "complete")
```
```{r}
plot(wisc.hclust)
abline(h = 19, col="red", lty=2)
```

At height 19 the clustering model has 4 clusters.

> Question 12: Which method gives your favorite results for the same data.dist dataset? 

The method = "complete" gives our favorite results because it is sensitive to noise in the data set and can help create compact clusters.

## 5. Combining methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[,1:2]), method = "ward.D2" )
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups): 
```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```
How do my cluster groups compare to the expert diagnosis 

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Question 13: How well does the newly created model with four clusters seperate out the two diagnoses?

The newly created model with four clusters separates out the two diagnoses very clearly and makes a more easy to read dendrogram with the same amount of information.


> Qustion 14: How well do the hierarchical clustering models you created in previous sections do in terms of separitng the diagnoses? Again, use the table() function to compare the output of each model with the vector containing the actual diagrams

They did really baddly. We do much better after PCA - the new PCA variables (what we call a basis set) give us much better seperation of M and B

## 7. Prediction

we can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich.


```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> QUESTION 16: Which of these new patients should we prioritize for follow up based on your results?

PATIENT 2



>>>>>>> f8688a779866d956db31ee05b3c0283d40cd271f
